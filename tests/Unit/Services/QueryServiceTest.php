<?php

namespace KieranFYI\Tests\Services\Core\Unit\Services;
;

use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Auth\User;
use KieranFYI\Services\Core\Eloquent\Builder;
use KieranFYI\Services\Core\Models\Service;
use KieranFYI\Services\Core\Models\ServiceModelType;
use KieranFYI\Services\Core\Services\QueryService;
use KieranFYI\Tests\Services\Core\TestCase;
use Symfony\Component\HttpKernel\Exception\HttpException;

class QueryServiceTest extends TestCase
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate')->run();
    }

    public function testExecute()
    {
        /** @var Service $service */
        $service = Service::create(['name' => 'Test']);
        $this->be($service);

        $builder = app()->make(Builder::class);
        $type = ServiceModelType::create([
            'name' => Service::class
        ]);
        $service->types()->save($type, ['accessible' => true]);

        $query = QueryService::create($builder, ['*'], Service::class);
        $this->assertInstanceOf(Collection::class, $query->execute());
    }

    public function testExecuteNonService()
    {
        /** @var Service $service */
        $this->be(new User());

        $builder = app()->make(Builder::class);

        $query = QueryService::create($builder, ['*'], Service::class);
        $this->assertNull($query->execute());
    }

    public function testExecuteInvalidType()
    {
        /** @var Service $service */
        $service = Service::create(['name' => 'Test']);
        $this->be($service);

        $builder = app()->make(Builder::class);

        $query = QueryService::create($builder, ['*'], Service::class);
        $this->expectException(ModelNotFoundException::class);
        $query->execute();
    }

    public function testExecuteNoType()
    {
        /** @var Service $service */
        $service = Service::create(['name' => 'Test']);
        $this->be($service);

        $builder = app()->make(Builder::class);
        ServiceModelType::create([
            'name' => Service::class
        ]);

        $query = QueryService::create($builder, ['*'], Service::class);
        $this->expectException(HttpException::class);
        $query->execute();
    }

    public function testExecuteInaccessible()
    {
        /** @var Service $service */
        $service = Service::create(['name' => 'Test']);
        $this->be($service);

        $builder = app()->make(Builder::class);
        $type = ServiceModelType::create([
            'name' => Service::class
        ]);
        $service->types()->save($type, ['accessible' => false]);

        $query = QueryService::create($builder, ['*'], Service::class);
        $this->expectException(HttpException::class);
        $query->execute();
    }
}